module Main where

import Prelude

import Control.Monad.Free (Free, liftF, runFreeM)
import Effect (Effect)
import Effect.Console as Console

data CommandF a
  = LogHello a
  | LogNumber Int a
  | GetRandomNumber (Int → a)

derive instance functorCommandF :: Functor CommandF


-- instance functorCommandF :: Functor CommandF where
--   map f (LogHello a) = LogHello (f a)
--   map f (LogNumber n a) = LogNumber n (f a)
--   map f (GetRandomNumber g) = GetRandomNumber (f <<< g)

type Command = Free CommandF

logHello :: Command Unit
logHello = liftF $ LogHello unit

logNumber :: Int → Command Unit
logNumber n = liftF $ LogNumber n unit

getRandomNumber :: Command Int
getRandomNumber = liftF $ GetRandomNumber (\x -> x)

myProgram :: Command Unit
myProgram = do
  logHello
  n <- getRandomNumber
  logNumber n
  logHello

runProgram :: forall a.
  Command a ->
  Effect a

runProgram = runFreeM go
  where
    go (LogHello a) = do
      Console.log "hello"
      pure a
    go (LogNumber n a) = do
      Console.log $ show n
      pure a
    go (GetRandomNumber f) = do
      pure (f 5) -- Generated by die roll, guaranteed to be random.
        

main :: Effect Unit
main = runProgram myProgram